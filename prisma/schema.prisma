generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(70)
  description       String             @db.VarChar(500)
  released_at       DateTime           @default(now()) @db.Timestamp(6)
  price             Decimal            @db.Decimal(9, 4)
  gender            Genders
  type              ItemTypes
  products_variants ProductsVariants[]
  reviews           Reviews[]

  @@map("products")
}

model ProductsVariants {
  id                       Int                      @id @default(autoincrement())
  name                     String                   @db.VarChar(70)
  product_id               Int
  products                 Products                 @relation(fields: [product_id], references: [id], onDelete: Cascade)
  products_variants_photos ProductsVariantsPhotos[]
  products_variants_sizes  ProductsVariantsSizes[]

  @@map("products_variants")
}

model ProductsVariantsPhotos {
  id                 Int              @id @default(autoincrement())
  product_variant_id Int
  url                String           @unique
  products_variants  ProductsVariants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)

  @@map("products_variants_photos")
}

model ProductsVariantsSizes {
  product_variant_id Int
  sizeid             Int
  quantity           Int              @default(0)
  products_variants  ProductsVariants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  sizes              Sizes            @relation(fields: [sizeid], references: [id], onUpdate: NoAction)

  @@id([product_variant_id, sizeid])
  @@map("products_variants_sizes")
}

model Reviews {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(70)
  reviewbody String?
  rating     Ratings
  created_at DateTime @default(now()) @db.Timestamp(6)
  author     Int
  product    Int
  users      Users    @relation(fields: [author], references: [id], onDelete: Cascade)
  products   Products @relation(fields: [product], references: [id], onDelete: Cascade)
}

model Sizes {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique @db.VarChar(4)
  type                    ItemTypes
  products_variants_sizes ProductsVariantsSizes[]
}

model Accounts {
  id      Int   @id @default(autoincrement())
  user_id Int
  user    Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([id, user_id])
}

model Users {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(50)
  email    String     @db.VarChar(254)
  reviews  Reviews[]
  accounts Accounts[]

  @@map("Users")
}

enum Genders {
  men
  women
}

enum ItemTypes {
  apparel
  shoe
}

enum Ratings {
  S5  @map("5")
  S45 @map("4.5")
  S4  @map("4")
  S35 @map("3.5")
  S3  @map("3")
  S25 @map("2.5")
  S2  @map("2")
  S15 @map("1.5")
  S1  @map("1")
  S05 @map("0.5")
  S0  @map("0")
}
